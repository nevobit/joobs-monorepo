type Remuneration {
    value: Int
    frecuency: String
}

type Location {
    long: Float
    lat: Float
    address: String
}

type Work {
    uuid: ID
    title: String
    user: String
    role: String
    skills: [String]
    description: String
    remuneration: Remuneration
    location: Location
}


input RemunerationInput {
    value: Float
    frecuency: String
}

input LocationInput {
    long: Float
    lat: Float
    address: String
}

input DataCreateWork {
    title: String
    user: String
    role: String
    status: String
    description: String
    skills: [String]
    location: LocationInput
    remuneration: RemunerationInput
}


type Stages{
    description: String
    requirements: [String]
}

input StagesInput{
    description: String
    requirements: [String]
}

type Project {
    title: String
    description: String
    skills: [String]
    stages: [String]
    steps: [String]
    difficulty: String
    duration: String
    reward: String
}

# USER

type User {
    uuid: ID
    name: String
    email: String
}

type AuthPayload {
    token: String
}

input UserInput {
    name: String
    email: String
    phone: String
    photo: String
}

type Query {
    works: [Work]
}


type Mutation {
    createWork(data: DataCreateWork): Work

    # USER
    userLogin(email: String!): AuthPayload
    userRegister(userData: UserInput): AuthPayload
}