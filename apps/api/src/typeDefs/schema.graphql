type Remuneration {
    value: Int
    frecuency: String
}

type Location {
    long: Float
    lat: Float
    address: String
}

type Work {
    id: ID
    title: String
    user: User
    role: String
    skills: [String]
    description: String
    remuneration: Remuneration
    location: Location
    created_at: String
}


type Discussion {
    id: ID
    title: String
    user: User
    created_at: String
    images: [String]
    link: String
    description: String
}

type Application {
    user: User
    work: Work
}

type Club {
    id: ID
    name: String
    icon: String
    description: String
    members: Int
    joined: Boolean
}


type Comment {
    id: ID
    text: String
    user: User
    discussionId: Discussion
    created_at: String
}



input RemunerationInput {
    value: Float
    frecuency: String
}

input LocationInput {
    long: Float
    lat: Float
    address: String
}

input DataCreateWork {
    title: String
    userId: String
    role: String
    status: String
    description: String
    skills: [String]
    location: LocationInput
    remuneration: RemunerationInput
}

input DataCreateDiscussion {
    title: String
    images: [String]
    link: String
    description: String
}

input DataCreateClub {
    name: String
    icon: String
    description: String
}

input DataCreateComment {
    text: String
    userId: String
    discussionId: String
}

type Stages {
    description: String
    requirements: [String]
}

input StagesInput {
    description: String
    requirements: [String]
}


type Steps {
    duration: String
    resources: [String]
    inCharge: String
}

input StepsInput {
    duration: String
    resources: [String]
    inCharge: String
}

input DataCreateProject {
    title: String
    description: String
    skills: [String]
    stages: [StagesInput]
    steps: [StepsInput]
    difficulty: String
    duration: String
    reward: String
}

input DataCreateApplication {
    userId: String
    workId: String
}

input DataCreateMember {
    userId: String
    clubId: String
}

type Member {
    user: User
    club: Club
}

type Project {
    title: String
    description: String
    skills: [String]
    stages: [Stages]
    steps: [Steps]
    difficulty: String
    duration: String
    reward: String
}

# USER

type User {
    id: ID
    name: String
    email: String
    phone: String
    photo: String
    location: Location
    skills: [String]
    born_date: String
    gender: String
}

type AuthPayload {
    token: String
    type: String
}

type AuthPayloadCode {
    token: String
}

input LocationInput {
    longitude: Float
    latitude: Float
}

input UserInput {
    name: String
    email: String
    phone: String
    photo: String
    location: LocationInput
    skills: [String]
    born_date: String
    gender: String
}

type Query {
    works: [Work]

    comments(id: String): [Comment]

    members(id: String): [Member]
    isJoined: Boolean

    workByUser: [Work]
    work(id: String): Work

    applications: [Application]
    application: Application

    discussions: [Discussion]
    discussion(id: String): Discussion
    
    clubs: [Club]
    club(id: String): Club
    
    user: User
    users: [User]
}


type Mutation {
    createWork(data: DataCreateWork): Work
    createDiscussion(data: DataCreateDiscussion): Discussion

    # APPLICATIONS
    createApplication(data: DataCreateApplication): Application
    
    #CLUBS
    joinToClub(data: DataCreateMember): Member
    createClub(data: DataCreateClub): Club

    comment(data: DataCreateComment): Comment

    # USER
    userLogin(email: String!): AuthPayload
    userLoginGoogle(email: String!): AuthPayload
    verifyCode(email: String!, code: String!): AuthPayloadCode
    userRegister(data: UserInput): AuthPayloadCode
}
